pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('ACESS_KEY')
        AWS_SECRET_ACCESS_KEY = credentials('SECRET_KEY')
        AWS_REGION = 'us-east-1'
        CLUSTER_NAME = 'k8s'
        FRONTEND_DOCKER_IMAGE_NAME = 'frontend'
        BACKEND_DOCKER_IMAGE_NAME = 'backend'
        IMAGE_TAG = 'latest'
    }
    stages {
        stage('Validate AWS CLI Credentials') {
            steps {
                script {
                    // Verify AWS CLI configuration by checking identity
                    sh """
                    aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                    aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                    aws configure set region ${AWS_REGION}

                    # Validate the credentials by calling STS to get the caller identity
                    aws sts get-caller-identity
                    """
                }
            }
        }
        stage('Checkout SCM') {
            steps {
                script {
                    sh"rm -rf *"
                    // Cloning Git repo
                    checkout(scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[url: 'https://github.com/Imsk31/Springboot_Project.git']]
                    ))
                }
            }
        }
        stage('Logging into DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId:"dockerhubcred", passwordVariable:"dockerhubpass", usernameVariable:"dockerhubuser")]){
                    sh "docker login -u ${env.dockerhubuser} -p ${env.dockerhubpass}"
                    dir('angular-java/spring-backend') {
                    sh "docker build -t ${env.dockerhubuser}/${BACKEND_DOCKER_IMAGE_NAME}:${IMAGE_TAG} ."
                    sh "docker push ${env.dockerhubuser}/${BACKEND_DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                        }
                    }    
                }    
            }
        }
        stage('Updating Kubeconfig') {
            steps {
                script {
                    // Updating Cluster Name and Region To Kubeconfig
                    sh "aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}"
                }
            }
        }
        stage('Create Namespace') {
            steps {
                script {
                    // Check if the 'dev' namespace exists
                    def namespace_exists = sh(script: "kubectl get ns dev --ignore-not-found", returnStdout: true).trim()

                    if (namespace_exists) {
                        echo "Namespace 'dev' already exists."
                    } else {
                        // Create the 'dev' namespace if it doesn't exist
                        sh "kubectl create ns dev"
                        echo "Namespace 'dev' created successfully."
                    }
                }
            }
        }
        stage('Creating Deployment And service for backend') {
            steps {
                dir('angular-java/spring-backend/manifest') {
                    script {
                        sh 'kubectl apply -f deployment.yaml -n dev'
                        sh 'kubectl apply -f service.yaml -n dev'
                    }
                }
            }
        }
        stage('Frontend Kubernetes Service Deployment') {
            steps {
                dir('angular-java/angular-frontend/manifest') {
                    sh 'kubectl apply -f service.yaml -n dev'
                }
            }
        }
        stage('Apply Kubernetes Ingress') {
            steps {
                script {
                    sh '''
                    # Apply the Ingress configuration for the application
                    kubectl apply -f ingress.yaml -n dev
                    kubectl get ingress -n dev
                    '''
                }
            }
        }
        stage('Wait for 1 Minute') {
            steps {
                script {
                    echo "Waiting for 30 Seconds..."
                    sleep(time: 30, unit: 'SECONDS') // Wait for 30 seconds
                }
            }
        }
        stage('Replace ALB DNS in Frontend') {
            steps {
                script {
                 def albDNS = sh(script: "kubectl get ingress -n dev -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()
                 def serviceFilePath = 'angular-java/angular-frontend/src/app/services/worker.service.ts'

                 // Using double quotes for the outer shell command and single quotes inside for sed
                 sh "sed -i 's|k8s-default-myapping-8cf2186fe6-1630135583.us-east-1.elb.amazonaws.com|${albDNS}|g' ${serviceFilePath}"
                }
             }
        }
        stage('Build Tag And Push Frontend Dockerfile Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId:"dockerhubcred", passwordVariable:"dockerhubpass", usernameVariable:"dockerhubuser")]){
                    sh "docker login -u ${env.dockerhubuser} -p ${env.dockerhubpass}"
                    dir('angular-java/angular-frontend') {
                    sh "docker build -t ${env.dockerhubuser}/${BACKEND_DOCKER_IMAGE_NAME}:${IMAGE_TAG} ."
                    sh "docker push ${env.dockerhubuser}/${FRONTEND_DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                        }
                    }    
                }    
            }
        }
        stage('Frontend Kubernetes Deployment') {
            steps {
                dir('angular-java/angular-frontend/manifest') {
                    sh 'kubectl apply -f deployment.yaml -n dev'
                }
            }
        }
    }
}
